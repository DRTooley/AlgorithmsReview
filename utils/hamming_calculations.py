
# Assumes 32 bit integers
class Hamming:
    memory = dict()
    @classmethod
    def Weight(cls, c):
        if c not in cls.memory:
            c0 = (c >> 0) & int('01010101010101010101010101010101', 2)
            c1 = (c >> 1) & int('01010101010101010101010101010101', 2)
            d = c0 + c1
            d0 = (d >> 0) & int('00110011001100110011001100110011', 2)
            d1 = (d >> 2) & int('00110011001100110011001100110011', 2)
            e = d0 + d1
            e0 = (e >> 0) & int('00001111000011110000111100001111', 2)
            e1 = (e >> 4) & int('00001111000011110000111100001111', 2)
            f = e0 + e1
            f0 = (f >> 0) & int('00000000111111110000000011111111', 2)
            f1 = (f >> 8) & int('00000000111111110000000011111111', 2)
            g = f0 + f1
            g0 = (g >> 0) & int('00000000000000001111111111111111', 2)
            g1 = (g >> 16) & int('00000000000000001111111111111111', 2)

            cls.memory[c] = g0 + g1

        return cls.memory[c]

    @classmethod
    def Distance(cls, a, b):
        c = a ^ b
        return cls.Weight(c)